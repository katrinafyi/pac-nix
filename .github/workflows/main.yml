name: "build Nix packages"
on:
  pull_request:
  push:
    branches: [main]
  # schedule:
  # - cron: '53 19 * * *'  # AEST 5:53 am
  workflow_run:
    workflows: [update Nix packages]
    types: [completed]
  workflow_dispatch:


jobs:
  update-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v25
    - run: nix build .#update
    - run: nix run .#update -- check

  build:
    strategy:
      fail-fast: false
      matrix:
        # end-user packages to ci build for cache
        pkg: 
          [aslp, bap-aslp, bap-primus, basil,
          retdec-uq-pac, asl-translator,
          gtirb-semantics, ddisasm, 
          retdec5, remill, alive2-aslp, alive2-regehr,
          planter,
          aslp_web, godbolt
        ]
    runs-on: ubuntu-latest

    defaults:
      run: { shell: "bash -ex -o pipefail {0}" }
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v25
    - uses: cachix/cachix-action@v14
      with: { name: pac-nix, authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}', skipPush: "${{ github.ref != 'refs/heads/main' }}" }

    - name: Check for meta.broken
      run: |
        broken="$(nix eval --json .#${{ matrix.pkg }}.meta.broken)"
        echo "bool=$broken" > "$GITHUB_OUTPUT"
        echo NIXPKGS_ALLOW_BROKEN="$("$broken" && echo 1 || echo 0)" > "$GITHUB_ENV"
      id: broken

    - run: ./nix-cached.sh build --impure .#${{matrix.pkg}}
      id: build
      continue-on-error: ${{ fromJSON(steps.broken.outputs.bool) }}
      
    - name: Run nix build .#${{matrix.pkg}}.tests
      id: test
      run: |
        for test in $(nix eval --impure .#${{matrix.pkg}}.tests --json | jq -r keys[]); do
          t=.#${{matrix.pkg}}.tests.$test 
          ./nix-cached.sh build --impure "$t" --no-link
        done
      continue-on-error: ${{ fromJSON(steps.broken.outputs.bool) }}
      if: steps.build.outcome == 'success'
      
    - name: Report status of broken packages
      run: |
        echo '::warning title=${{ matrix.pkg }}::broken package has status build=${{steps.build.outcome}}, test=${{steps.test.outcome}}'
      if: ${{ fromJSON(steps.broken.outputs.bool) }}
    - run: ls -l
